AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Creates a static website using S3 for the Employee serverless web application
  workshop
Parameters:
  BucketName:
    Type: String
    Description: 'The name for the bucket hosting the website, e.g. ''employee-website'''
  CodeBucket:
    Type: String
    Default: employee-eu-west-1
    Description: S3 bucket containing the code deployed by this template
  CodeKeyPrefix:
    Type: String
    Default: WebSite/StaticWebHosting
    Description: Key prefix for resources referenced from the CodeBucket
  CreateCert:
    Description: >-
      Whether to create an HTTPS certificate for this site.
    Type: String
    AllowedValues:
      - 'Yes'
      - 'No'
    Default: 'Yes'
  Domain:
    Description: The domain of the website.
    Type: String
  HostedZoneID:
    Description: The ID of the hosted zone in Route 53
    Type: 'AWS::Route53::HostedZone::Id'

Conditions:
    ShouldCreateCert: !Equals
    - Ref: CreateCert
    - 'Yes'
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: Website Configuration
        Parameters:
          - BucketName
      - Label:
          default: Advanced Configuration
        Parameters:
          - CodeBucket
          - CodeKeyPrefix
    ParameterLabels:
      BucketName:
        default: Website Bucket Name
  'AWS::CloudFormation::Designer':
    b2bd13eb-594b-4c44-a03d-3433c09037b9:
      size:
        width: 60
        height: 60
      position:
        x: 60
        'y': 90
      z: 1
      embeds: []
    c057500c-4ecb-47ee-ac86-3d944627754d:
      size:
        width: 60
        height: 60
      position:
        x: 180
        'y': 90
      z: 1
      embeds: []
    fc45b187-9104-4d91-87c0-01195087647c:
      size:
        width: 60
        height: 60
      position:
        x: 210
        'y': 200
      z: 1
      embeds: []
    1c2c5603-a24b-4d08-9076-08c34b356d53:
      size:
        width: 60
        height: 60
      position:
        x: 60
        'y': 200
      z: 1
      embeds: []
    9d4b02dc-e365-437d-90e3-b57dec4a6f2d:
      size:
        width: 60
        height: 60
      position:
        x: 310
        'y': 120
      z: 1
      embeds: []
      isassociatedwith:
        - fc45b187-9104-4d91-87c0-01195087647c
    84779314-fab3-4017-8367-3353e1e12b26:
      size:
        width: 60
        height: 60
      position:
        x: 460
        'y': 150
      z: 0
      embeds: []
    dd42f56b-3f91-444d-b3f2-967c3f05f276:
      size:
        width: 60
        height: 60
      position:
        x: 450
        'y': 260
      z: 0
      embeds: []
    8cfdc905-e131-4a60-b3dd-a073ef87b874:
      size:
        width: 60
        height: 60
      position:
        x: 340
        'y': 270
      z: 0
      embeds: []
    e9962d89-21e6-43b4-a7a1-e646e20d9069:
      size:
        width: 60
        height: 60
      position:
        x: 560
        'y': 100
      z: 0
      embeds: []
Resources:
  WebsiteBucket:
    Properties:
      BucketName: !Ref BucketName
      WebsiteConfiguration:
        IndexDocument: index.html
    Type: 'AWS::S3::Bucket'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: fc45b187-9104-4d91-87c0-01195087647c
  WebsiteBucketPolicy:
    Properties:
      Bucket: !Ref WebsiteBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              CanonicalUser: !GetAtt CloudFrontOriginAccessIdentity.S3CanonicalUserId
            Action: 's3:GetObject'
            Resource: !Sub 'arn:aws:s3:::${WebsiteBucket}/*'
    Type: 'AWS::S3::BucketPolicy'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 9d4b02dc-e365-437d-90e3-b57dec4a6f2d
  WebsiteContent:
    Properties:
      ServiceToken: !GetAtt CopyS3ObjectsFunction.Arn
      SourceBucket: !Ref CodeBucket
      SourcePrefix: !Sub '${CodeKeyPrefix}/'
      Bucket: !Ref WebsiteBucket
    Type: 'Custom::S3Objects'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 1c2c5603-a24b-4d08-9076-08c34b356d53
  S3CopyRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Path: /employee/
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: AllowLogging
                Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: '*'
              - Sid: SourceBucketReadAccess
                Effect: Allow
                Action:
                  - 's3:ListBucket'
                  - 's3:GetObject'
                Resource:
                  - !Sub 'arn:aws:s3:::${CodeBucket}'
                  - !Sub 'arn:aws:s3:::${CodeBucket}/${CodeKeyPrefix}/*'
              - Sid: DestBucketWriteAccess
                Effect: Allow
                Action:
                  - 's3:ListBucket'
                  - 's3:GetObject'
                  - 's3:PutObject'
                  - 's3:PutObjectAcl'
                  - 's3:PutObjectVersionAcl'
                  - 's3:DeleteObject'
                  - 's3:DeleteObjectVersion'
                  - 's3:CopyObject'
                Resource:
                  - !Sub 'arn:aws:s3:::${WebsiteBucket}'
                  - !Sub 'arn:aws:s3:::${WebsiteBucket}/*'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: b2bd13eb-594b-4c44-a03d-3433c09037b9
  CopyS3ObjectsFunction:
    Properties:
      Description: Copies objects from a source S3 bucket to a destination
      Handler: index.handler
      Runtime: python3.6
      Role: !GetAtt S3CopyRole.Arn
      Timeout: 120
      Code:
        ZipFile: |
          import os
          import json
          import cfnresponse

          import boto3
          from botocore.exceptions import ClientError
          client = boto3.client('s3')

          import logging
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def handler(event, context):
            logger.info("Received event: %s" % json.dumps(event))
            source_bucket = event['ResourceProperties']['SourceBucket']
            source_prefix = event['ResourceProperties'].get('SourcePrefix') or ''
            bucket = event['ResourceProperties']['Bucket']
            prefix = event['ResourceProperties'].get('Prefix') or ''

            result = cfnresponse.SUCCESS

            try:
              if event['RequestType'] == 'Create' or event['RequestType'] == 'Update':
                result = copy_objects(source_bucket, source_prefix, bucket, prefix)
              elif event['RequestType'] == 'Delete':
                result = delete_objects(bucket, prefix)
            except ClientError as e:
              logger.error('Error: %s', e)
              result = cfnresponse.FAILED

            cfnresponse.send(event, context, result, {})


          def copy_objects(source_bucket, source_prefix, bucket, prefix):
            paginator = client.get_paginator('list_objects_v2')
            page_iterator = paginator.paginate(Bucket=source_bucket, Prefix=source_prefix)
            for key in {x['Key'] for page in page_iterator for x in page['Contents']}:
              dest_key = os.path.join(prefix, os.path.relpath(key, source_prefix))
              if not key.endswith('/'):
                print('copy {} to {}'.format(key, dest_key))
                client.copy_object(CopySource={'Bucket': source_bucket, 'Key': key}, Bucket=bucket, Key = dest_key)
            return cfnresponse.SUCCESS

          def delete_objects(bucket, prefix):
            paginator = client.get_paginator('list_objects_v2')
            page_iterator = paginator.paginate(Bucket=bucket, Prefix=prefix)
            objects = [{'Key': x['Key']} for page in page_iterator for x in page['Contents']]
            client.delete_objects(Bucket=bucket, Delete={'Objects': objects})
            return cfnresponse.SUCCESS

    Type: 'AWS::Lambda::Function'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: c057500c-4ecb-47ee-ac86-3d944627754d
  CloudFrontOriginAccessIdentity:
    Type: 'AWS::CloudFront::CloudFrontOriginAccessIdentity'
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Ref WebsiteBucket
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 84779314-fab3-4017-8367-3353e1e12b26
  CloudFrontDistribution:
    Type: 'AWS::CloudFront::Distribution'
    Properties:
      DistributionConfig:
        Aliases:
          - !Ref Domain
        ViewerCertificate:
          AcmCertificateArn: !Ref Cert
          SslSupportMethod: sni-only
        Origins:
          - DomainName: !GetAtt WebsiteBucket.DomainName
            Id: s3origin
            S3OriginConfig:
              OriginAccessIdentity: !Sub >-
                origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}
        Enabled: 'true'
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
            - DELETE
            - OPTIONS
            - PATCH
            - POST
            - PUT
          TargetOriginId: s3origin
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          ViewerProtocolPolicy: !If
            - ShouldCreateCert
            - redirect-to-https
            - allow-all
        PriceClass: PriceClass_All
    Metadata:
      'AWS::CloudFormation::Designer':
        id: dd42f56b-3f91-444d-b3f2-967c3f05f276
  Cert:
    Type: 'AWS::CertificateManager::Certificate'
    Condition: ShouldCreateCert
    Properties:
      DomainName: !Ref Domain
      ValidationMethod: DNS
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 8cfdc905-e131-4a60-b3dd-a073ef87b874
  Route53Record:
    Type: 'AWS::Route53::RecordSet'
    Properties:
      HostedZoneId: !Ref HostedZoneID
      Name: !Ref Domain
      Type: A
      AliasTarget:
        HostedZoneId: Z2FDTNDATAQYW2
        DNSName: !GetAtt CloudFrontDistribution.DomainName
    Metadata:
      'AWS::CloudFormation::Designer':
        id: e9962d89-21e6-43b4-a7a1-e646e20d9069
Outputs:
  WebsiteURL:
    Value: !GetAtt WebsiteBucket.WebsiteURL
  URL:
    Description: 'URL of your website'
    Value: !If
    - ShouldCreateCert
    - !Sub 'https://${Domain}'
    - !Sub 'http://${Domain}'
  DistributionId:
    Description: 'CloudFront Distribution ID'
    Value: !Ref CloudFrontDistribution
  Domain:
    Description: 'Cloudfront Domain'
    Value: !GetAtt CloudFrontDistribution.DomainName
